.TH 9p-read 5 "@META_DATE@" "@META_ALIAS@" "@META_NAME@"
.SH NAME
9p read, write \- transfer data from and to a file
.SH SYNOPSIS
.nf
size[4] Tread tag[2] fid[4] offset[8] count[4]
size[4] Rread tag[2] count[4] data[count]
.fi
.LP
.nf
size[4] Twrite tag[2] fid[4] offset[8] count[4] data[count]
size[4] Rwrite tag[2] count[4]
.fi
.SH DESCRIPTION
The read request asks for count bytes of data from the file identified by fid,
which must be opened for reading, starting offset bytes after the beginning
of the file. The bytes are returned with the read reply message.
.LP
The count field in the reply indicates the number of bytes returned.
This may be less than the requested amount.
If the offset field is greater than or equal to the number of bytes in
the file, a count of zero will be returned.
.LP
For directories, read returns an integral number of directory entries exactly
as in stat (see stat(5)), one for each member of the directory.  The read
request message must have offset equal to zero or the value of offset in
the previous read on the directory, plus the number of bytes returned in
the previous read. In other words, seeking other than to the beginning is
illegal in a directory (see seek(2)).
.LP
The write request asks that count bytes of data be recorded in the file
identified by fid, which must be opened for writing, starting offset bytes
after the beginning of the file.  If the file is append–only, the data
will be placed at the end of the file regardless of offset.  Directories
may not be written.
.LP
The write reply records the number of bytes actually written.  It is
usually an error if this is not the same as requested.
.LP
Because 9P implementations may limit the size of individual messages,
more than one message may be produced by a single read or write call.
The iounit field returned by open(5), if non–zero, reports the maximum
size that is guaranteed to be transferred atomically.
.SH "DIOD EXTENSIONS"
\fBdiod\fR adds atomic read/write requests with optional checksums.
.LP
.nf
size[4] Taread tag[2] fid[4] datacheck[1] offset[8] count[4] rsize[4]
size[4] Raread tag[2] count[4] data[count] check[4]
size[4] Tawrite tag[2] fid[4] datacheck[1] offset[8] count[4] rsize[4] data[count] check[4]
size[4] Rawrite tag[2] count[4]
.fi
.LP
These are like read/write except when a read/write system call has to
make multiple calls due to msize constraints, aread/awrite present
the original request size in rsize so that the server can make one
read/write call and buffer it, preserving atomicity.
The rsize decreases on successive calls
by the total number of bytes transferred until it is equal to
count on the last call.
.LP
In addition, data is protected by an optional 32 bit check field.
The datacheck field configures checksum behavior (0x00 for disabled,
0x01 for Adler32).
.SH "LINUX ENTRY POINTS"
tbd
.SH "PLAN9 ENTRY POINTS"
Read and write messages are generated by the corresponding calls.
Because they include an offset, the pread and pwrite calls correspond
more directly to the 9P messages.  Although seek(2) affects the offset,
it does not generate a message.
.SH ORIGIN
The Plan 9 operating system, fourth edition, 2002.
.br
Copyright (c) 2010 Lucent Technologies. All rights reserved.
.SH "SEE ALSO"
[plan9] http://plan9.bell-labs.com/sys/man/index.html
.LP
[graverobbers] ``Grave Robbers from Outer Space: Using 9P2000 Under Linux'',
Eric Van Hensbergen and Ron Minnich, 2005.
.LP
[rfc9p2000.u] http://ericvh.github.com/9p-rfc/rfc9p2000.u.html
.LP
9p-intro(5)
